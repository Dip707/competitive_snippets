{
    "Disjoint Set Unions":{
        "prefix": "!!dsu",
        "body":[
            "vector<int> Rank;",
            "vector<int> parent;",
            "int findParent(int x){",
            "    while(x != parent[x]){",
            "        parent[x] = parent[parent[x]];",
            "        x = parent[x];",
            "    }",
            "return x",
            "}",
            "void UNION(int a, int b){",
            "    a = findParent(a);",
            "    b = findParent(b);",
            "    if(Rank[a] < Rank[b]){",
            "        parent[a]=b;",
            "    }else if(Rank[a] > Rank[b]){",
            "        parent[b] = a;",
            "    }else{",
            "        parent[a] = b;",
            "        Rank[b]++;",
            "    }",
            "}"
        ],
        "description": "Disjoint Set Union Code to Import basic Disjoint set Snippet"
    },
    "Depth First Search":{
        "prefix": "!!dfs-basic",
        "body":[
            "vector<vector<int>> adj;",
            "vector<bool> visited;",
            "void dfs(int s = 0){",
            "    visited[s] = true;",
            "    for(auto &i: adj[s])dfs(i);",
            "}"
        ],
        "description": "Basic Depth First Search Code for Competitive Programming"
    },
    "Breadth First Search":{
        "pref": "!!bfs-basic",
        "body":[
            "vector<vector<int>> adj;",
            "void bfs(int s = 0){",
            "    vector<bool> visited (adj.size(),false);",
            "    queue<int> q;",
            "    q.push(s);",
            "    visited[s] = true;",
            "    while(q.size()){",
            "        int u = q.front();",
            "        q.pop();",
            "        for(auto &i: adj[u]){",
            "            if(!visited[i]){",
            "                visited[i] = true;",
            "                q.push(i);",
            "            }",
            "        }",
            "    }",
            "}"
        ],
        "description": "Basic Breadth First Search Code for Competitive Programming"
    }
}